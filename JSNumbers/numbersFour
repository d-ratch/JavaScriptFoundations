<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Java Foundations</title>
    <link rel="stylesheet" href="style.css">
    <script src="javascript.js"></script>
</head>
<body>
    <ul>
        <a href="/lessonOne">Lesson One</a>
        <a href="/numbersOne">Numbers One</a>
        <a href="/numbersTwo">Numbers Two</a>
        <a href="/numbersThree">Numbers Three</a>
    </ul>

    <script>
        // Unary has a single operand 
        let x = 1;

        x = -x;

        // Binary has two operands
        let xx = 1, y = 3;

        // % is the remainder operator
        5 % 2; // 1 is the remainder
        8 % 3 // 2 is the remainder
        8 % 4 // 0 is the remainder

        // ** is Exponentiation i.e. to the power of
        2 ** 2; // 2 to the power of 2
        2 ** 3; // 2 to the power of 3
        2 ** 4; // 2 to the power of 4
        4 ** (1/2) // 2 to the power of 1/2 is the same as square root
        8 ** (1/3) // 2 to the power of 1/3 is the same as a cubic root

        // String concatenation with binary+
        let s = "my " + "string";

        // If any of the operands are a string then the other operand is converted to a string too
        let numberConversionToString = "1" + 2;
        let nCTS2 = (2 + 2 + '1'); // Answer = 41
        let nCTS3 = ('1' + 2 + 2);// Answer = 122

        // Concatenation with string and number only works with + operator
        let zz = (6 - '2'); // Answer is 4
        let cc = (6 / '2'); // Answer is 3

        // Unary+ $20/month lol jk. Does nothing to numbers, but will convert non-numbers to numbers
        +true; // 1
        +""; // 0
        // Unary + does the same thing as Number(...) but it's shorter
        let apples = "2";
        let oranges = "3";
        apples + oranges; // 23

        +apples + +oranges; // 5

        // Unary operators have higher precedence than binary operators

        // Assignment (=) has a precedence of two 
        let a = 1;
        let b = 2;

        let c = 3 - (a = b + 1);

        // Chainging assignments
        // let aa, bb, cc;

        aa = bb = cc = 2 + 2; // all equal 4

        // Split for readability
        cc = 2 + 2;
        bb = cc;
        aa = cc;

        // Modify in place
        let nn = 2;
        nn = nn + 5;
        nn = nn * 2;

        nn *= 3 + 5;

        // Increment/decrement
        let counter = 2;
        counter++; // ++ = add 1. Therefore, counter = 3
        counter--; // -- = subtract 1, therefore, counter = 2 again
        // Increment/decrement can only be applie to variables, 5++ will throw an error
        // Can place -- or ++ before or after the variable


        // When working with a value - Prefix returns the new value postfix returns the old value

        let newCounter = 1;
        let at = ++newCounter; // a = 2
        let ay = newCounter++ // a = 1.. technically. not in this example because a is two from the example one line above this one

        // You can also use ++/-- in arithmatic operations
        let example = 1;
        (2 * ++example); // 4

        let secondExample = 1;
        (2 * secondExample++); // 2 because postfix returns old value
        
        // Bitwise operators
        // AND (&)
        // OR (|)
        // XOR (^)
        // NOT (~)
        // LEFT SHIFT (<<)
        // RIGHT SHIFT (>>)
        // ZERO-FILL RIGHT SHIFT (>>>)


        // Comma,
        let coma = (1 + 2, 3 + 4); // 7, the result of 3 + 4. 1 + 2 is thrown away and 3 + 4 is used

        let p = 2;

        let o = 1 + (p *= 2);

        alert(p);

        // console.log(57 + 69);

        console.log(1 + 2 + 3 + 4 + 5 + 6);

        console.log((4 + 6 + 9) / 77);
    </script>
</body>
</html>