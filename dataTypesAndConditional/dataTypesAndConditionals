<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <script src="javascript.js"></script>
    <title>JS Data Types and Conditionals</title>
</head>
<body>
    <h1>NONE OF THE CONTENT IS MY OWN</h1>
    <h1>I COPIED ALL OF IT FROM: <a href="https://javascript.info/types">https://javascript.info/types</a></h1>

    <h1> JS Data Types and Conditionals</h1> 

    <h2>Data Types</h2>
        <p>
            There are 8 basic JS types
        </p>
        <p>
            Variable: You can put any type in a variable
            This style is called dynamically typed, meaning that there are many data types, but variables aren't bound to them
                <script>
                    let message = "hello";
                    message = 123456;
                </script>
        </p>

    <h2>Numbers</h2>
        <p>
            <script>
                let z = 123;
                z = 12.345;
            </script>
        </p>
        <p>
            The number type represents both integer and floating points. Different from Swift
            Many operations for numbers - see JSNumbers
            Infinity, -Infinity, NaN
                <script>
                    let x = (1/0); //Infinity
                    let c = Infinity; // Infinity
                </script>
        </p>
        <p>
            Nan represents a computational error. The result of an incorrect or an undefined mathematical operation
                <script>
                    let v = ("Not a number"/2); // NaN
                </script>
        </p>
        <p>
            NaN is sticky, meaning further computation after NaN returns NaN. It is propagated 
            One exception is NaN ** 0 is 1
                <script>
                    let b = (NaN + 1); // NaN
                    let n = (b * 3); // NaN
                </script>
        </p>
    
    <h2>BigInt</h2>
        <p>           
            In JS, the 'number' type cannot safely represetn integer values larger than (2^53-1) (that's 9007199254740991), or less that -(2^53-1) for negatives
            To be precise, the 'number' type can store larger integers (up to 1.7976931348623157 * 10^308), but outside of the safe integer range +/-(2^53-1) there'll be a precision error,
            because not all digits fir into the fixed 64-bit storage.
            So an 'approximate' value may be stored.
            For example, theses two numbers (right above the safe range) are the same:
                <script>
                    console.log(9007199254740991 + 1); //9077199254740992
                    console.log(9007199254740991 + 2); //9077199254740992
                </script>
        </p>
        <p>
            All odd integers greater than (2^53-1) can't be stored in the 'number' type
            For most purposes, the default range is plenty, but sometimes we need the entire range of really big integers, e.g. for crypthography or microsecond-precision timestamps.
            BigInt type was recently added to the language to represent integers of arbitrary length. 
            A BigInt value is created by appending n to the end of an integer:
            The 'n' at the end makes it a 'BigInt'
                <script>
                    const bigInt = 1234567890123456789012345678901234567890n;
                </script>
        </p>

    <h2>Strings</h2> 
        <p>          
            A string in JS must be surrounded by quotes.
                <script>
                    let str = "Jell-o";
                    let strTwo = 'Single quotes are ok too.';
                    let phrase = `You can embed another string as well - ${str}`;

                    // alert(phrase);
                </script>
        </p>

        <p>
            In JS, there are three types of quotes:
        </p>

        <ol>
            <li>Double quotes: "Jell-o"</li>
            <li>Single quotes: 'Jell-o'</li>
            <li>Backticks: `Jell-o`</li>
        </ol>
        
        <p>
            Single and double quotes are "simple" quotes. There's practically no difference between them in JS.
        </p>
        <p>
            Backticks are "Extended Funcionality" quotes. They allow us to embed variable and expressions into a string by wrapping them in ${...}, for example:
                <script>
                    let name = "Geohn";

                    // embed a variable 
                    `Jell-o, ${name}!` // Jell-o, Geohn

                    // embed an expression
                    `the result is ${1 + 2}`; // the result is 3
                </script>
        </p>
        <p>
            The expression inside ${...} is evaluated and the result becomes part of the string. We can put anything in there: a variable like name, or an arithmetical expression like 1 + 2, or something more complex.
        </p>
        <p>
            Please note that this can only be done in backticks. Other quotes don't have the embedding functionality!
        </p>

    <h2>Booloean (Logical Type)</h2>
        <p>
            The boolean type only has two values: true and false
        </p>
        <p>
            This type is commonly used to store yes/no values: true means "Yes! Correct!", and false means "NO! Incorrect!"
        </p>
        <p>
            For instance:
                <script>
                    let nameFieldChecked = true; // yes the name field is checked
                    let ageFieldChecked = false; // no the age field is not checked
                </script>
        </p>
        <p>
            Boolean values also come as a result of compasrisons:
                <script> 
                    let isGreater = 4 > 1;
                    // alert(isGreater) // true - the result of the comparison is true
                </script>
        </p>
    
    <h2>The 'null' value</h2>
        <p>
            The special null value does not belong to any of the types described above
        </p>
        <p>
            It forms a separate type of its own which only contains the null value:
                <script>
                    let age = null;
                </script>
        </p>
        <p>
            In JS, null is not a 'reference to a non-existing object' or a 'null pointer' like in some other languages.
        </p>
        <p>
            It is a special value which represents "nothing", "empty", or "value unknown"
        </p>
        <p>
            The code above states that 'age' = 'unknown'
        </p>

    <h2>The 'undefined' value</h2>
        <p>
            The special value 'undefined' also stands apart. It makes a type of its own, just like null
        </p>
        <p>
            The meaning of undefined is "value is not assigned"
        </p>
        <p>
            If a variable is declared, but not assigned, then its value is undefined:
                <script>
                    let rage;

                    // alert(age); shows 'undefined'
                </script>
        </p>
        <p>
            Technically, it is possible to explicitly assign 'undefined' to a variable:
                <script>
                    let nage = 100;
                    // chage the value to undefined
                    nage = undefined;

                    // alert(nage); 'undefined'
                </script>
        </p>
        <p>
            ...but don't do that. Normally, one uses null to assign an "empty" or "unknown" value to a variable, while undefined is reserved as a default for unassgned things.
        </p>

    <h2>Objects and Symbols</h2>
        <p>
            The object type is special.
        </p>
        <p>
            All other types are called 'primitive' because their values can only contain a single thing (be it a string, a number.. whatever). In contrast, objects are used to store a collection of data and more complex entities.
        </p>
        <p>
            The symbol type is used to create a unique identifier for objects.
        </p>

    <h2>The 'typeof' or typeof() operator</h2>
        <p>
            The typeof or typeof() operator returns the type of the operand. It's useful when we want to process values of different types differently or just want quickly check a values type.        
        </p>
        <p>
            A call to typeof x returns a string with the type name:
                <script>
                    typeof undefined // 'undefined'

                    typeof 0 // 'number'

                    typeof 10n // 'biging'

                    typeof true // 'boolean'

                    typeof "foo" // 'string'

                    typeof Symbol(id) // 'symbol'

                    typeof Math // 'object' (1)

                    typeof null // 'object' (2)

                    typeof alert // 'function' (3)
                </script>
        </p>
        <p>
            The last three lines need additional explanation:
        </p>
        <ol>
            <li>Math is a built-in object that provides mathematical operations.</li>
            <li>The result of typeof null is 'object'. That's an officially recognized error in typeof, coming from very early days of JS and kept for compatibility. Definitely, null is not an object. It is a special value with a separate type of its own. The behavior of typeof is wrong here.</li>
            <li>The result of typeof alert is 'functiuon', because alert is a function. Functions belong to the 'object' type. But typeof treats the differently, returning 'function'. That also comes from the early days of JS. Technically, such behavior isn't correct, but can be convient in practice.</li>
        </ol>

    <h2>Summary</h2>
        <p>
            There are 8 basic data types in JS
        </p>
        <ul>
            <li>Seven primitive data types:</li>
            <ul>
                <li>number: any type of integer or floating-point.</li>
                <li>bigint: for integers of arbitrary length.</li>
                <li>string: For strings. Of note, a string may have  zero or more characters, there's no separate single-character type.</li>
                <li>boolean: true/false</li>
                <li>null: Unknown values - a standalone type that has a single value: null.</li>
                <li>undefined: Unassigned values - a standalone type that has a single value: undefined.</li>
                <li>symbol: for unique identifiers.</li>
            </ul>
        </ul>
        <ul>
            <li>And one non-primitive type:</li>
            <ul>
                <li>object: for complex data structures.</li>
            </ul>
        </ul>
        <p>
            The typeof operator allows us to see which type is stored in a variable.
            <ul>
                <li>Usually used as 'typeof x', but 'typeof(x)' is also possible.</li>
                <li>Returns a string with the name of the type, like "string"</li>
                <li>For null, it returns "object", which is an error, NULL IS NOT AN OBJECT!</li>
            </ul>
        </p>
</body>
</html>